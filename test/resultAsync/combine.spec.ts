import { Result } from '@/src/result';
import { ResultAsync } from '@/src/resultAsync';

describe('ResultAsync', () => {
  describe('combine', () => {
    it('succeeds with one successful ResultAsync', async () => {
      const sut = await ResultAsync.combine({
        success: ResultAsync.success('âœ…'),
      }).toPromise();

      expect(sut).toSucceedWith({
        success: 'âœ…',
      });
    });

    it('succeeds with two successful ResultAsync', async () => {
      const sut = await ResultAsync.combine({
        first: ResultAsync.success('âœ…'),
        second: ResultAsync.success('âœ…'),
      }).toPromise();
      expect(sut).toSucceedWith({
        first: 'âœ…',
        second: 'âœ…',
      });
    });

    it('fails with one failed ResultAsync', async () => {
      const sut = await ResultAsync.combine({
        failure: ResultAsync.failure('ðŸ’¥'),
      }).toPromise();

      expect(sut).toFailWith('ðŸ’¥');
    });

    it('fails with one successful and one failed ResultAsync', async () => {
      const sut = await ResultAsync.combine({
        success: ResultAsync.success('âœ…'),
        failure: ResultAsync.failure('ðŸ’¥'),
      }).toPromise();
      expect(sut).toFailWith('ðŸ’¥');
    });

    it('succeeds with one successful Result', async () => {
      const sut = await ResultAsync.combine({
        success: Result.success('âœ…'),
      }).toPromise();

      expect(sut).toSucceedWith({
        success: 'âœ…',
      });
    });

    it('succeeds with two successful Results', async () => {
      const sut = await ResultAsync.combine({
        first: Result.success('âœ…'),
        second: Result.success('âœ…'),
      }).toPromise();
      expect(sut).toSucceedWith({
        first: 'âœ…',
        second: 'âœ…',
      });
    });

    it('fails with one failed Result', async () => {
      const sut = await ResultAsync.combine({
        failure: Result.failure('ðŸ’¥'),
      }).toPromise();

      expect(sut).toFailWith('ðŸ’¥');
    });

    it('fails with one successful and one failed Result', async () => {
      const sut = await ResultAsync.combine({
        success: Result.success('âœ…'),
        failure: Result.failure('ðŸ’¥'),
      }).toPromise();
      expect(sut).toFailWith('ðŸ’¥');
    });

    it('fails with mixed types when one fails', async () => {
      const sut = await ResultAsync.combine({
        sut: Result.success('âœ…'),
        sutAsync: ResultAsync.failure('ðŸ’¥'),
      }).toPromise();

      expect(sut).toFailWith('ðŸ’¥');
    });
  });
});
